def compute_cost(X, y, theta):
    """
    Computes the average squared difference between an obserbation's actual and
    predicted values for linear regression.  

    Input:
    - X: inputs  (n features over m instances).
    - y: true labels (1 value over m instances).
    - theta: the parameters (weights) of the model being learned.

    Returns a single value:
    - J: the cost associated with the current set of parameters (single number).
    """
    
    J = 0  # Use J for the cost.
    ###########################################################################
    # TODO: Implement the MSE cost function.                                  #
    ###########################################################################
    for i, vec in enumerate(X):
        h_theta = np.inner(vec, theta)
        J += ((h_theta - y[i]) ** 2)
    J = J / (2 * len(y))
    ###########################################################################
    #                             END OF YOUR CODE                            #
    ###########################################################################
    return J